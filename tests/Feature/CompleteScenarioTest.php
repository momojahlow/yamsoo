<?php

namespace Tests\Feature;

use App\Models\User;
use App\Models\RelationshipType;
use App\Models\FamilyRelationship;
use App\Services\FamilyRelationService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class CompleteScenarioTest extends TestCase
{
    use RefreshDatabase;

    protected FamilyRelationService $familyRelationService;

    protected function setUp(): void
    {
        parent::setUp();
        $this->familyRelationService = app(FamilyRelationService::class);

        // Ex√©cuter les seeders n√©cessaires
        $this->seed(\Database\Seeders\ComprehensiveRelationshipTypesSeeder::class);
    }

    /**
     * Test du nouveau sc√©nario sans relations automatiques :
     *
     * Ahmed cr√©e une demande vers Fatima avec relation "Mari".
     * Fatima accepte ‚Üí Fatima devient √©pouse d'Ahmed et Ahmed devient mari de Fatima.
     * Fatima cr√©e une demande vers Youssef Bennani avec relation "Fr√®re".
     * Youssef accepte ‚Üí Youssef devient fr√®re de Fatima et Fatima devient s≈ìur de Youssef.
     * Youssef cr√©e une demande vers Ahmed avec relation "Beau-fr√®re".
     * Ahmed accepte ‚Üí Ahmed devient beau-fr√®re de Youssef et Youssef devient beau-fr√®re d'Ahmed.
     * Ahmed cr√©e une demande vers Leila Mansouri avec relation "S≈ìur".
     * Leila accepte ‚Üí Leila devient s≈ìur d'Ahmed et Ahmed devient fr√®re de Leila.
     * Leila cr√©e deux demandes :
     * - Vers Youssef avec relation "Beau-fr√®re".
     * - Vers Fatima avec relation "Belle-s≈ìur".
     * Fatima accepte la demande de Leila ‚Üí Fatima devient belle-s≈ìur de Leila et Leila devient belle-s≈ìur de Fatima.
     * Youssef accepte la demande de Leila ‚Üí Youssef devient beau-fr√®re de Leila et Leila devient belle-s≈ìur de Youssef.
     *
     * Chaque acceptation cr√©e UNIQUEMENT deux entr√©es r√©ciproques dans la table des relations.
     * AUCUNE relation automatique ne doit √™tre cr√©√©e.
     */
    public function test_complete_family_scenario(): void
    {
        // Cr√©er les utilisateurs pour le test
        $ahmed = User::factory()->withProfile('male')->create(['name' => 'Ahmed Benali', 'email' => 'ahmed@test.com']);
        $fatima = User::factory()->withProfile('female')->create(['name' => 'Fatima Zahra', 'email' => 'fatima@test.com']);
        $youssef = User::factory()->withProfile('male')->create(['name' => 'Youssef Bennani', 'email' => 'youssef@test.com']);
        $leila = User::factory()->withProfile('female')->create(['name' => 'Leila Mansouri', 'email' => 'leila@test.com']);

        echo "\n=== SC√âNARIO COMPLET DE RELATIONS FAMILIALES ===\n";

        // Afficher tous les types disponibles pour debug
        $allTypes = RelationshipType::pluck('name')->toArray();
        echo "Types disponibles : " . implode(', ', $allTypes) . "\n";

        // R√©cup√©rer les types de relations n√©cessaires
        $husbandType = RelationshipType::where('name', 'husband')->first();
        $brotherType = RelationshipType::where('name', 'brother')->first();
        $brotherInLawType = RelationshipType::where('name', 'brother_in_law')->first();
        $sisterType = RelationshipType::where('name', 'sister')->first();
        $sisterInLawType = RelationshipType::where('name', 'sister_in_law')->first();

        $this->assertNotNull($husbandType, 'Type husband doit exister');
        $this->assertNotNull($brotherType, 'Type brother doit exister');

        echo "\n=== NOUVEAU SC√âNARIO SANS RELATIONS AUTOMATIQUES ===\n";

        // 1. Ahmed ‚Üí Fatima (Mari)
        echo "1. Ahmed demande √† Fatima d'√™tre son mari...\n";
        $request1 = $this->familyRelationService->createRelationshipRequest(
            $ahmed, $fatima->id, $husbandType->id, 'Demande de mariage'
        );
        $this->familyRelationService->acceptRelationshipRequest($request1);
        echo "‚úÖ Ahmed et Fatima sont maintenant mari et √©pouse\n";

        // 2. Fatima ‚Üí Youssef (Fr√®re)
        echo "2. Fatima demande √† Youssef d'√™tre son fr√®re...\n";
        $request2 = $this->familyRelationService->createRelationshipRequest(
            $fatima, $youssef->id, $brotherType->id, 'Tu es mon fr√®re'
        );
        $this->familyRelationService->acceptRelationshipRequest($request2);
        echo "‚úÖ Fatima et Youssef sont maintenant fr√®re et s≈ìur\n";

        // 3. Youssef ‚Üí Ahmed (Beau-fr√®re)
        if ($brotherInLawType) {
            echo "3. Youssef demande √† Ahmed d'√™tre son beau-fr√®re...\n";
            $request3 = $this->familyRelationService->createRelationshipRequest(
                $youssef, $ahmed->id, $brotherInLawType->id, 'Tu es mon beau-fr√®re'
            );
            $this->familyRelationService->acceptRelationshipRequest($request3);
            echo "‚úÖ Youssef et Ahmed sont maintenant beaux-fr√®res\n";
        } else {
            echo "‚ö†Ô∏è Type brother_in_law non trouv√©, relation ignor√©e\n";
        }

        // 4. Ahmed ‚Üí Leila (S≈ìur)
        echo "4. Ahmed demande √† Leila d'√™tre sa s≈ìur...\n";
        $request4 = $this->familyRelationService->createRelationshipRequest(
            $ahmed, $leila->id, $sisterType->id, 'Tu es ma s≈ìur'
        );
        $this->familyRelationService->acceptRelationshipRequest($request4);
        echo "‚úÖ Ahmed et Leila sont maintenant fr√®re et s≈ìur\n";

        // 5. Leila ‚Üí Youssef (Beau-fr√®re)
        if ($brotherInLawType) {
            echo "5. Leila demande √† Youssef d'√™tre son beau-fr√®re...\n";
            $request5 = $this->familyRelationService->createRelationshipRequest(
                $leila, $youssef->id, $brotherInLawType->id, 'Tu es mon beau-fr√®re'
            );
            $this->familyRelationService->acceptRelationshipRequest($request5);
            echo "‚úÖ Leila et Youssef sont maintenant belle-s≈ìur et beau-fr√®re\n";
        } else {
            echo "‚ö†Ô∏è Type brother_in_law non trouv√©, relation ignor√©e\n";
        }

        // 6. Leila ‚Üí Fatima (Belle-s≈ìur)
        if ($sisterInLawType) {
            echo "6. Leila demande √† Fatima d'√™tre sa belle-s≈ìur...\n";
            $request6 = $this->familyRelationService->createRelationshipRequest(
                $leila, $fatima->id, $sisterInLawType->id, 'Tu es ma belle-s≈ìur'
            );
            $this->familyRelationService->acceptRelationshipRequest($request6);
            echo "‚úÖ Leila et Fatima sont maintenant belles-s≈ìurs\n";
        } else {
            echo "‚ö†Ô∏è Type sister_in_law non trouv√©, relation ignor√©e\n";
        }

        echo "\n=== V√âRIFICATIONS FINALES ===\n";

        // V√©rifier toutes les relations cr√©√©es
        $this->verifyUserFamily($ahmed, 'Ahmed');
        $this->verifyUserFamily($fatima, 'Fatima');
        $this->verifyUserFamily($youssef, 'Youssef');
        $this->verifyUserFamily($leila, 'Leila');

        // V√©rifier les relations bidirectionnelles
        echo "\n=== V√âRIFICATION DES RELATIONS BIDIRECTIONNELLES ===\n";

        $totalRelations = FamilyRelationship::where('status', 'accepted')->count();
        echo "Total des relations en base : {$totalRelations}\n";

        // V√©rifier que chaque relation a sa r√©ciproque
        $this->verifyBidirectionalRelations();

        // V√©rifications sp√©cifiques du nouveau sc√©nario
        $this->assertUserHasRelation($ahmed, $fatima, 'husband', 'Ahmed devrait avoir Fatima comme √©pouse');
        $this->assertUserHasRelation($fatima, $ahmed, 'wife', 'Fatima devrait avoir Ahmed comme √©poux');

        $this->assertUserHasRelation($fatima, $youssef, 'brother', 'Fatima devrait avoir Youssef comme fr√®re');
        $this->assertUserHasRelation($youssef, $fatima, 'sister', 'Youssef devrait avoir Fatima comme s≈ìur');

        $this->assertUserHasRelation($ahmed, $leila, 'sister', 'Ahmed devrait avoir Leila comme s≈ìur');
        $this->assertUserHasRelation($leila, $ahmed, 'brother', 'Leila devrait avoir Ahmed comme fr√®re');

        // V√©rifier qu'AUCUNE relation automatique n'a √©t√© cr√©√©e
        $autoRelations = FamilyRelationship::where('created_automatically', true)->count();
        echo "\nRelations automatiquement cr√©√©es : {$autoRelations}\n";
        $this->assertEquals(0, $autoRelations, 'Aucune relation automatique ne devrait √™tre cr√©√©e');

        echo "\nüéâ NOUVEAU SC√âNARIO R√âUSSI ! Seules les relations directes ont √©t√© cr√©√©es.\n";
    }

    private function verifyUserFamily(User $user, string $name): void
    {
        $relations = FamilyRelationship::where('user_id', $user->id)
            ->where('status', 'accepted')
            ->with(['relatedUser', 'relationshipType'])
            ->get();

        echo "\n{$name} a " . $relations->count() . " relations :\n";
        foreach ($relations as $relation) {
            $auto = $relation->created_automatically ? ' (auto)' : '';
            echo "  - {$relation->relatedUser->name} : {$relation->relationshipType->display_name_fr}{$auto}\n";
        }
    }

    private function verifyBidirectionalRelations(): void
    {
        $relations = FamilyRelationship::where('status', 'accepted')->get();
        $missingReciprocalCount = 0;

        foreach ($relations as $relation) {
            $reciprocal = FamilyRelationship::where('user_id', $relation->related_user_id)
                ->where('related_user_id', $relation->user_id)
                ->where('status', 'accepted')
                ->exists();

            if (!$reciprocal) {
                $missingReciprocalCount++;
                echo "‚ö†Ô∏è Relation manquante : {$relation->relatedUser->name} ‚Üí {$relation->user->name}\n";
            }
        }

        if ($missingReciprocalCount === 0) {
            echo "‚úÖ Toutes les relations ont leur r√©ciproque\n";
        } else {
            echo "‚ùå {$missingReciprocalCount} relations r√©ciproques manquantes\n";
        }

        $this->assertEquals(0, $missingReciprocalCount, 'Toutes les relations devraient avoir leur r√©ciproque');
    }

    private function assertUserHasRelation(User $user, User $relatedUser, string $relationCode, string $message): void
    {
        $hasRelation = FamilyRelationship::where('user_id', $user->id)
            ->where('related_user_id', $relatedUser->id)
            ->whereHas('relationshipType', function($query) use ($relationCode) {
                $query->where('name', $relationCode);
            })
            ->where('status', 'accepted')
            ->exists();

        $this->assertTrue($hasRelation, $message);
    }
}
