
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.7'
import { 
  FamilyRelationType, 
  ProfileWithId, 
  ProcessedRelation,
  generateSuggestions 
} from './suggestions.ts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

Deno.serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Cr√©ation du client Supabase avec les variables d'environnement
    const supabaseUrl = Deno.env.get('SUPABASE_URL') || '';
    const supabaseAnonKey = Deno.env.get('SUPABASE_ANON_KEY') || '';
    const supabase = createClient(supabaseUrl, supabaseAnonKey);
    
    console.log("üîç R√©cup√©ration des relations familiales accept√©es...");
    
    // R√©cup√©rer toutes les relations familiales avec statut accept√©
    const { data: rawRelations, error: relationsError } = await supabase
      .from('family_relations')
      .select(`
        id, 
        user_id, 
        related_user_id, 
        relation_type, 
        status
      `)
      .eq('status', 'accepted');
      
    if (relationsError) {
      throw relationsError;
    }

    console.log(`‚úÖ R√©cup√©r√© ${rawRelations?.length || 0} relations accept√©es`);
    
    // R√©cup√©rer tous les profils pertinents en une seule requ√™te
    const uniqueUserIds = new Set<string>();
    (rawRelations || []).forEach(rel => {
      uniqueUserIds.add(rel.user_id);
      uniqueUserIds.add(rel.related_user_id);
    });
    
    console.log(`üßë‚Äçü§ù‚Äçüßë R√©cup√©ration des profils pour ${uniqueUserIds.size} utilisateurs...`);
    
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id, first_name, last_name, gender')
      .in('id', Array.from(uniqueUserIds));
      
    if (profilesError) {
      throw profilesError;
    }
    
    console.log(`üë§ R√©cup√©r√© ${profiles?.length || 0} profils`);
    
    // Cr√©er un mapping d'ID √† profil pour un acc√®s facile
    const profilesMap = new Map<string, ProfileWithId>();
    (profiles || []).forEach(profile => {
      profilesMap.set(profile.id, profile);
    });
    
    // Convertir les relations brutes en format plus facile √† traiter
    const processedRelations: ProcessedRelation[] = (rawRelations || []).map(rel => ({
      userId: rel.user_id,
      relatedUserId: rel.related_user_id,
      relationType: rel.relation_type,
      userProfile: profilesMap.get(rel.user_id),
      relatedProfile: profilesMap.get(rel.related_user_id)
    }));
    
    console.log("üîÑ Traitement des relations...");

    // G√©n√©rer les suggestions de relation bas√©es sur les relations existantes
    const suggestions = generateSuggestions(processedRelations, profilesMap);
    console.log(`‚ú® G√©n√©r√© ${suggestions.length} suggestions de relation`);

    // Build a comprehensive map of all existing relations for filtering
    // This is a bidirectional map to check relations in both directions
    const existingRelationMap = new Map<string, Set<string>>();
    
    for (const rel of processedRelations) {
      // Add relation from user_id to related_user_id
      if (!existingRelationMap.has(rel.userId)) {
        existingRelationMap.set(rel.userId, new Set<string>());
      }
      existingRelationMap.get(rel.userId)!.add(rel.relatedUserId);
      
      // Also add the inverse relation for easy lookup
      if (!existingRelationMap.has(rel.relatedUserId)) {
        existingRelationMap.set(rel.relatedUserId, new Set<string>());
      }
      existingRelationMap.get(rel.relatedUserId)!.add(rel.userId);
    }
    
    console.log(`üîç Created relation map with ${existingRelationMap.size} users`);

    // Pour chaque suggestion, v√©rifier si elle existe d√©j√† dans la table relation_suggestions
    let insertCount = 0;
    for (const suggestion of suggestions) {
      // Check if a relation already exists between these users (in either direction)
      const hasExistingRelation = 
        (existingRelationMap.get(suggestion.user_id)?.has(suggestion.suggested_user_id)) ||
        (existingRelationMap.get(suggestion.suggested_user_id)?.has(suggestion.user_id));
      
      if (hasExistingRelation) {
        console.log(`üö´ Relation d√©j√† existante entre ${suggestion.user_id} et ${suggestion.suggested_user_id} - suggestion ignor√©e`);
        continue;
      }
      
      // Adapter la relation sugg√©r√©e en fonction du genre
      if (suggestion.suggested_relation_type === 'father' || suggestion.suggested_relation_type === 'mother') {
        // R√©cup√©rer le profil de l'utilisateur sugg√©r√© pour d√©terminer son genre
        const suggestedUserProfile = profilesMap.get(suggestion.suggested_user_id);
        if (suggestedUserProfile && suggestedUserProfile.gender === 'F') {
          suggestion.suggested_relation_type = 'mother';
        } else if (suggestedUserProfile && suggestedUserProfile.gender === 'M') {
          suggestion.suggested_relation_type = 'father';
        }
      }
      
      // Corriger les relations incorrectes bas√©es sur les parents partag√©s
      if (suggestion.reason && 
         (suggestion.reason.includes("partagez la m√™me") || 
          suggestion.reason.includes("m√®re ‚Üí") || 
          suggestion.reason.includes("p√®re ‚Üí"))) {
        
        // C'est un fr√®re ou une s≈ìur, pas un autre type de relation
        const suggestedUserProfile = profilesMap.get(suggestion.suggested_user_id);
        
        if (suggestedUserProfile) {
          // D√©terminer le type de relation en fonction du genre
          if (suggestedUserProfile.gender === 'F') {
            suggestion.suggested_relation_type = 'sister';
            // Mettre √† jour la raison pour plus de clart√©
            if (suggestion.reason.includes("m√®re ‚Üí") || suggestion.reason.includes("m√™me m√®re")) {
              suggestion.reason = `Vous partagez la m√™me m√®re ${suggestion.reason.includes("(") ? suggestion.reason.substring(suggestion.reason.indexOf("(")) : ""}`;
            } else if (suggestion.reason.includes("p√®re ‚Üí") || suggestion.reason.includes("m√™me p√®re")) {
              suggestion.reason = `Vous partagez le m√™me p√®re ${suggestion.reason.includes("(") ? suggestion.reason.substring(suggestion.reason.indexOf("(")) : ""}`;
            }
          } else {
            suggestion.suggested_relation_type = 'brother';
            // Mettre √† jour la raison pour plus de clart√©
            if (suggestion.reason.includes("m√®re ‚Üí") || suggestion.reason.includes("m√™me m√®re")) {
              suggestion.reason = `Vous partagez la m√™me m√®re ${suggestion.reason.includes("(") ? suggestion.reason.substring(suggestion.reason.indexOf("(")) : ""}`;
            } else if (suggestion.reason.includes("p√®re ‚Üí") || suggestion.reason.includes("m√™me p√®re")) {
              suggestion.reason = `Vous partagez le m√™me p√®re ${suggestion.reason.includes("(") ? suggestion.reason.substring(suggestion.reason.indexOf("(")) : ""}`;
            }
          }
        }
      }

      // V√©rifie si la suggestion existe d√©j√† dans la table relation_suggestions
      const { data: existingSuggestion, error: suggestionError } = await supabase
        .from('relation_suggestions')
        .select('*')
        .eq('user_id', suggestion.user_id)
        .eq('suggested_user_id', suggestion.suggested_user_id)
        .eq('status', 'pending')
        .maybeSingle();

      if (suggestionError) {
        console.error('‚ùå Erreur lors de la v√©rification de suggestion existante:', suggestionError);
        continue;
      }

      // Si la suggestion n'existe pas, l'ins√©rer
      if (!existingSuggestion) {
        const { error: insertError } = await supabase
          .from('relation_suggestions')
          .insert([suggestion]);

        if (insertError) {
          console.error('‚ùå Erreur lors de l\'insertion de la suggestion:', insertError);
        } else {
          insertCount++;
        }
      }
    }

    console.log(`‚úÖ ${insertCount} nouvelles suggestions ins√©r√©es avec succ√®s`);

    return new Response(
      JSON.stringify({ success: true, suggestionsCount: insertCount }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      },
    );
  } catch (error) {
    console.error('‚ùå Erreur globale:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      },
    );
  }
});
