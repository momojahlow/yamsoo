<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\User;
use App\Models\FamilyRelationship;

class FixDatabaseData extends Command
{
    /**
     * The name and signature of the console command.
     */
    protected $signature = 'fix:database-data';

    /**
     * The description of the console command.
     */
    protected $description = 'Corriger les donn√©es incoh√©rentes dans la base';

    public function handle()
    {
        $this->info('üîß CORRECTION DES DONN√âES DE LA BASE');
        $this->info('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        $this->newLine();

        // 1. Corriger les genres
        $this->fixGenders();
        $this->newLine();

        // 2. Analyser les relations probl√©matiques
        $this->analyzeProblematicRelationships();
        $this->newLine();

        // 3. Proposer des corrections
        $this->proposeCorrections();

        return 0;
    }

    private function fixGenders(): void
    {
        $this->info('üë• CORRECTION DES GENRES :');

        $corrections = [
            'fatima.zahra@example.com' => 'female',
            'amina.tazi@example.com' => 'female',
            'aicha.idrissi@example.com' => 'female',
        ];

        foreach ($corrections as $email => $correctGender) {
            $user = User::where('email', $email)->first();
            if ($user && $user->profile) {
                $oldGender = $user->profile->gender;
                $user->profile->update(['gender' => $correctGender]);
                $this->line("   ‚úÖ {$user->name} : {$oldGender} ‚Üí {$correctGender}");
            }
        }
    }

    private function analyzeProblematicRelationships(): void
    {
        $this->info('üîç ANALYSE DES RELATIONS PROBL√âMATIQUES :');

        $relationships = FamilyRelationship::with(['user.profile', 'relatedUser.profile', 'relationshipType'])->get();

        foreach ($relationships as $relation) {
            $user = $relation->user;
            $relatedUser = $relation->relatedUser;
            $type = $relation->relationshipType;

            // V√©rifier la coh√©rence genre/relation
            $issues = $this->checkRelationshipConsistency($user, $relatedUser, $type->code);
            
            if (!empty($issues)) {
                $this->line("   ‚ö†Ô∏è  {$user->name} ‚Üí {$relatedUser->name} : {$type->name_fr}");
                foreach ($issues as $issue) {
                    $this->line("      - {$issue}");
                }
            }
        }
    }

    private function checkRelationshipConsistency(User $user, User $relatedUser, string $relationCode): array
    {
        $issues = [];
        $userGender = $user->profile?->gender;
        $relatedGender = $relatedUser->profile?->gender;

        // V√©rifications de coh√©rence
        switch ($relationCode) {
            case 'wife':
                if ($relatedGender !== 'female') {
                    $issues[] = "Une √©pouse doit √™tre de genre f√©minin";
                }
                break;
            case 'husband':
                if ($relatedGender !== 'male') {
                    $issues[] = "Un mari doit √™tre de genre masculin";
                }
                break;
            case 'father':
                if ($relatedGender !== 'male') {
                    $issues[] = "Un p√®re doit √™tre de genre masculin";
                }
                break;
            case 'mother':
                if ($relatedGender !== 'female') {
                    $issues[] = "Une m√®re doit √™tre de genre f√©minin";
                }
                break;
            case 'son':
                if ($relatedGender !== 'male') {
                    $issues[] = "Un fils doit √™tre de genre masculin";
                }
                break;
            case 'daughter':
                if ($relatedGender !== 'female') {
                    $issues[] = "Une fille doit √™tre de genre f√©minin";
                }
                break;
        }

        return $issues;
    }

    private function proposeCorrections(): void
    {
        $this->info('üí° PROPOSITIONS DE CORRECTIONS :');

        $relationships = FamilyRelationship::with(['user.profile', 'relatedUser.profile', 'relationshipType'])->get();

        foreach ($relationships as $relation) {
            $user = $relation->user;
            $relatedUser = $relation->relatedUser;
            $type = $relation->relationshipType;

            $correction = $this->suggestCorrection($user, $relatedUser, $type->code);
            
            if ($correction) {
                $this->line("   üîÑ {$user->name} ‚Üí {$relatedUser->name} :");
                $this->line("      Actuel : {$type->name_fr}");
                $this->line("      Sugg√©r√© : {$correction}");
            }
        }
    }

    private function suggestCorrection(User $user, User $relatedUser, string $relationCode): ?string
    {
        $userGender = $user->profile?->gender;
        $relatedGender = $relatedUser->profile?->gender;

        // Suggestions bas√©es sur les genres
        if ($relationCode === 'wife' && $relatedGender === 'male') {
            return 'Mari';
        }
        
        if ($relationCode === 'husband' && $relatedGender === 'female') {
            return '√âpouse';
        }

        if ($relationCode === 'son' && $relatedGender === 'female') {
            return 'Fille';
        }

        if ($relationCode === 'daughter' && $relatedGender === 'male') {
            return 'Fils';
        }

        if ($relationCode === 'father' && $relatedGender === 'female') {
            return 'M√®re';
        }

        if ($relationCode === 'mother' && $relatedGender === 'male') {
            return 'P√®re';
        }

        return null;
    }
}
