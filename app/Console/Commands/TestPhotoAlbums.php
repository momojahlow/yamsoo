<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\User;
use App\Models\PhotoAlbum;
use App\Models\Photo;

class TestPhotoAlbums extends Command
{
    protected $signature = 'test:photo-albums';
    protected $description = 'Tester le syst√®me d\'albums photo pour les utilisateurs';

    public function handle()
    {
        $this->info('üñºÔ∏è  TEST DU SYST√àME D\'ALBUMS PHOTO');
        $this->info('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        $this->newLine();

        // Trouver quelques utilisateurs pour les tests
        $users = User::take(3)->get();
        
        if ($users->count() < 3) {
            $this->error('‚ùå Pas assez d\'utilisateurs pour les tests (minimum 3 requis)');
            return 1;
        }

        $this->info('üë• UTILISATEURS DE TEST :');
        foreach ($users as $user) {
            $this->line("   ‚Ä¢ {$user->name} (ID: {$user->id})");
        }
        $this->newLine();

        // Test 1: Cr√©er des albums pour chaque utilisateur
        $this->info('1Ô∏è‚É£ CR√âATION D\'ALBUMS PHOTO :');
        
        foreach ($users as $user) {
            // Album par d√©faut
            $defaultAlbum = $user->photoAlbums()->create([
                'title' => 'Photos de ' . $user->name,
                'description' => 'Album photo principal de ' . $user->name,
                'privacy' => 'family',
                'is_default' => true,
            ]);

            // Album familial
            $familyAlbum = $user->photoAlbums()->create([
                'title' => 'Moments en famille',
                'description' => 'Photos de famille et √©v√©nements sp√©ciaux',
                'privacy' => 'family',
                'is_default' => false,
            ]);

            // Album priv√©
            $privateAlbum = $user->photoAlbums()->create([
                'title' => 'Photos personnelles',
                'description' => 'Album priv√©',
                'privacy' => 'private',
                'is_default' => false,
            ]);

            $this->line("   ‚úÖ Albums cr√©√©s pour {$user->name} :");
            $this->line("      ‚Ä¢ {$defaultAlbum->title} (par d√©faut, famille)");
            $this->line("      ‚Ä¢ {$familyAlbum->title} (famille)");
            $this->line("      ‚Ä¢ {$privateAlbum->title} (priv√©)");
        }
        $this->newLine();

        // Test 2: Simuler l'ajout de photos
        $this->info('2Ô∏è‚É£ SIMULATION D\'AJOUT DE PHOTOS :');
        
        foreach ($users as $user) {
            $albums = $user->photoAlbums;
            
            foreach ($albums as $album) {
                // Simuler 3-5 photos par album
                $photoCount = rand(3, 5);
                
                for ($i = 1; $i <= $photoCount; $i++) {
                    Photo::create([
                        'user_id' => $user->id,
                        'photo_album_id' => $album->id,
                        'title' => "Photo {$i} - {$album->title}",
                        'description' => "Description de la photo {$i}",
                        'file_path' => "public/photos/{$user->id}/{$album->id}/photo_{$i}.jpg",
                        'file_name' => "photo_{$i}.jpg",
                        'mime_type' => 'image/jpeg',
                        'file_size' => rand(500000, 2000000), // 500KB √† 2MB
                        'width' => rand(1920, 4000),
                        'height' => rand(1080, 3000),
                        'thumbnail_path' => "public/photos/{$user->id}/{$album->id}/photo_{$i}_thumb.jpg",
                        'metadata' => [
                            'camera_make' => 'Canon',
                            'camera_model' => 'EOS R5',
                            'taken_at' => now()->subDays(rand(1, 365))->toISOString(),
                        ],
                        'order' => $i,
                        'taken_at' => now()->subDays(rand(1, 365)),
                    ]);
                }
                
                // Mettre √† jour le compteur de photos
                $album->updatePhotosCount();
                
                $this->line("   üì∏ {$photoCount} photos ajout√©es √† '{$album->title}' de {$user->name}");
            }
        }
        $this->newLine();

        // Test 3: V√©rifier les relations et permissions
        $this->info('3Ô∏è‚É£ TEST DES PERMISSIONS D\'ACC√àS :');
        
        $user1 = $users[0];
        $user2 = $users[1];
        $user3 = $users[2];
        
        $this->line("   üë§ Testeur principal : {$user1->name}");
        $this->line("   üë§ Utilisateur 2 : {$user2->name}");
        $this->line("   üë§ Utilisateur 3 : {$user3->name}");
        $this->newLine();

        // Tester l'acc√®s aux albums
        foreach ($user2->photoAlbums as $album) {
            $canView = $album->canBeViewedBy($user1);
            $privacyIcon = $album->privacy === 'public' ? 'üåç' : ($album->privacy === 'family' ? 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶' : 'üîí');
            $accessIcon = $canView ? '‚úÖ' : '‚ùå';
            
            $this->line("   {$accessIcon} {$privacyIcon} Album '{$album->title}' ({$album->privacy}) - Acc√®s : " . ($canView ? 'Autoris√©' : 'Refus√©'));
        }
        $this->newLine();

        // Test 4: Statistiques des albums
        $this->info('4Ô∏è‚É£ STATISTIQUES DES ALBUMS :');
        
        $totalAlbums = PhotoAlbum::count();
        $totalPhotos = Photo::count();
        $publicAlbums = PhotoAlbum::where('privacy', 'public')->count();
        $familyAlbums = PhotoAlbum::where('privacy', 'family')->count();
        $privateAlbums = PhotoAlbum::where('privacy', 'private')->count();
        
        $this->line("   üìä Total albums : {$totalAlbums}");
        $this->line("   üì∏ Total photos : {$totalPhotos}");
        $this->line("   üåç Albums publics : {$publicAlbums}");
        $this->line("   üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Albums familiaux : {$familyAlbums}");
        $this->line("   üîí Albums priv√©s : {$privateAlbums}");
        $this->newLine();

        // Test 5: Albums par utilisateur
        $this->info('5Ô∏è‚É£ D√âTAIL PAR UTILISATEUR :');
        
        foreach ($users as $user) {
            $userAlbums = $user->photoAlbums()->withCount('photos')->get();
            $totalUserPhotos = $user->photos()->count();
            
            $this->line("   üë§ {$user->name} :");
            $this->line("      üìä {$userAlbums->count()} albums, {$totalUserPhotos} photos au total");
            
            foreach ($userAlbums as $album) {
                $defaultIcon = $album->is_default ? '‚≠ê' : '  ';
                $privacyIcon = $album->privacy === 'public' ? 'üåç' : ($album->privacy === 'family' ? 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶' : 'üîí');
                
                $this->line("      {$defaultIcon} {$privacyIcon} {$album->title} ({$album->photos_count} photos)");
            }
            $this->newLine();
        }

        // Test 6: Test des m√©thodes du mod√®le User
        $this->info('6Ô∏è‚É£ TEST DES M√âTHODES DU MOD√àLE USER :');
        
        $testUser = $users[0];
        
        // Test getOrCreateDefaultAlbum
        $defaultAlbum = $testUser->getOrCreateDefaultAlbum();
        $this->line("   ‚úÖ Album par d√©faut : {$defaultAlbum->title}");
        
        // Test recentPhotos
        $recentPhotos = $testUser->recentPhotos(5)->get();
        $this->line("   üì∏ Photos r√©centes : {$recentPhotos->count()} photos");
        
        // Test visibleAlbumsFor
        $visibleAlbums = $testUser->visibleAlbumsFor($users[1]);
        $this->line("   üëÅÔ∏è  Albums visibles pour {$users[1]->name} : {$visibleAlbums->count()} albums");
        
        $this->newLine();
        $this->info('üéØ TESTS TERMIN√âS AVEC SUCC√àS !');
        $this->line('   Le syst√®me d\'albums photo fonctionne correctement.');
        $this->line('   Vous pouvez maintenant utiliser les routes et contr√¥leurs pour l\'interface utilisateur.');

        return 0;
    }
}
