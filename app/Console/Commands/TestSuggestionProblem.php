<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\User;
use App\Models\RelationshipType;
use App\Models\FamilyRelationship;
use App\Services\FamilyRelationService;

class TestSuggestionProblem extends Command
{
    protected $signature = 'test:suggestion-problem';
    protected $description = 'Analyser le probl√®me de suggestions incoh√©rentes';

    public function handle()
    {
        $this->info('üîç ANALYSE DU PROBL√àME DE SUGGESTIONS INCOH√âRENTES');
        $this->info('==================================================');
        $this->newLine();

        $service = app(FamilyRelationService::class);

        // R√©cup√©rer les utilisateurs
        $ahmed = User::where('name', 'Ahmed Benali')->first();
        $fatima = User::where('name', 'Fatima Zahra')->first();
        $amina = User::where('name', 'Amina Tazi')->first();

        $this->info('üë• Utilisateurs du sc√©nario:');
        $this->line("   - Ahmed Benali (ID: {$ahmed->id})");
        $this->line("   - Fatima Zahra (ID: {$fatima->id})");
        $this->line("   - Amina Tazi (ID: {$amina->id})");
        $this->newLine();

        // √âtape 1: Cr√©er les relations selon le sc√©nario
        $this->info('üìù √âtape 1: Cr√©ation des relations selon le sc√©nario');
        
        // Ahmed est le p√®re d'Amina
        $this->createAndAcceptRelation($service, $ahmed, $amina, 'father', 'Ahmed (p√®re) ‚Üí Amina (fille)');
        
        // Fatima est l'√©pouse d'Ahmed
        $this->createAndAcceptRelation($service, $fatima, $ahmed, 'wife', 'Fatima (√©pouse) ‚Üí Ahmed (mari)');
        
        $this->newLine();

        // √âtape 2: Analyser les relations existantes
        $this->info('üìã √âtape 2: Relations existantes dans la base');
        
        $this->analyzeUserRelations($ahmed, 'Ahmed Benali');
        $this->analyzeUserRelations($fatima, 'Fatima Zahra');
        $this->analyzeUserRelations($amina, 'Amina Tazi');
        
        $this->newLine();

        // √âtape 3: Analyser la logique de suggestions
        $this->info('üß† √âtape 3: Analyse de la logique de suggestions');
        
        $this->info('   Sc√©nario actuel:');
        $this->line('   - Ahmed est p√®re d\'Amina');
        $this->line('   - Fatima est √©pouse d\'Ahmed');
        $this->line('   - Donc: Fatima devrait √™tre belle-m√®re d\'Amina (ou m√®re si adopt√©e)');
        $this->line('   - Et: Amina devrait √™tre belle-fille de Fatima (ou fille si adopt√©e)');
        $this->newLine();

        // √âtape 4: V√©rifier les suggestions actuelles
        $this->info('üí° √âtape 4: V√©rification des suggestions actuelles');
        
        // Chercher les suggestions existantes
        $suggestions = \App\Models\Suggestion::with(['user', 'suggestedUser'])->get();
        
        if ($suggestions->isEmpty()) {
            $this->warn('   ‚ö†Ô∏è Aucune suggestion trouv√©e dans la base de donn√©es');
        } else {
            $this->info('   Suggestions existantes:');
            foreach ($suggestions as $suggestion) {
                $this->line("     - {$suggestion->user->name} ‚Üí {$suggestion->suggestedUser->name} : {$suggestion->suggested_relation_name} ({$suggestion->reason})");
            }
        }
        
        $this->newLine();

        // √âtape 5: Analyser la logique d'inf√©rence
        $this->info('üîÑ √âtape 5: Test de la logique d\'inf√©rence');
        
        $this->testInferenceLogic($fatima, $amina, 'Fatima ‚Üí Amina');
        $this->testInferenceLogic($amina, $fatima, 'Amina ‚Üí Fatima');
        
        $this->newLine();

        $this->info('‚úÖ ANALYSE TERMIN√âE');
        $this->info('V√©rifiez les r√©sultats ci-dessus pour identifier les incoh√©rences.');

        return 0;
    }

    private function createAndAcceptRelation(FamilyRelationService $service, User $requester, User $target, string $relationTypeName, string $description)
    {
        try {
            $relationType = RelationshipType::where('name', $relationTypeName)->first();
            if (!$relationType) {
                $this->error("   ‚ùå Type de relation '{$relationTypeName}' non trouv√©");
                return;
            }

            $request = $service->createRelationshipRequest(
                $requester,
                $target->id,
                $relationType->id,
                "Test: {$description}"
            );

            $relation = $service->acceptRelationshipRequest($request);
            $this->info("   ‚úÖ {$description} - Succ√®s");

        } catch (\Exception $e) {
            $this->error("   ‚ùå {$description} - Erreur: {$e->getMessage()}");
        }
    }

    private function analyzeUserRelations(User $user, string $userName)
    {
        $relations = FamilyRelationship::where('user_id', $user->id)
            ->with(['relatedUser', 'relationshipType'])
            ->get();

        $this->info("   Relations de {$userName}:");
        if ($relations->isEmpty()) {
            $this->line('     - Aucune relation');
        } else {
            foreach ($relations as $relation) {
                $this->line("     - {$userName} ‚Üí {$relation->relatedUser->name} : {$relation->relationshipType->display_name_fr}");
            }
        }
    }

    private function testInferenceLogic(User $user1, User $user2, string $description)
    {
        $this->info("   Test d'inf√©rence: {$description}");
        
        // Trouver les connexions communes
        $user1Relations = FamilyRelationship::where('user_id', $user1->id)
            ->with(['relatedUser', 'relationshipType'])
            ->get();

        $user2Relations = FamilyRelationship::where('user_id', $user2->id)
            ->with(['relatedUser', 'relationshipType'])
            ->get();

        // Chercher des connexions communes
        $commonConnections = [];
        foreach ($user1Relations as $rel1) {
            foreach ($user2Relations as $rel2) {
                if ($rel1->related_user_id === $rel2->related_user_id) {
                    $commonConnections[] = [
                        'connector' => $rel1->relatedUser->name,
                        'user1_relation' => $rel1->relationshipType->display_name_fr,
                        'user2_relation' => $rel2->relationshipType->display_name_fr
                    ];
                }
            }
        }

        if (empty($commonConnections)) {
            $this->line("     - Aucune connexion commune trouv√©e");
        } else {
            $this->line("     - Connexions communes:");
            foreach ($commonConnections as $connection) {
                $this->line("       * Via {$connection['connector']}: {$user1->name} ({$connection['user1_relation']}) ‚Üî {$user2->name} ({$connection['user2_relation']})");
                
                // Analyser la relation sugg√©r√©e
                $suggestedRelation = $this->inferRelationship($connection['user1_relation'], $connection['user2_relation']);
                $this->line("         ‚Üí Relation sugg√©r√©e: {$suggestedRelation}");
            }
        }
    }

    private function inferRelationship(string $relation1, string $relation2): string
    {
        // Logique simplifi√©e d'inf√©rence
        if (($relation1 === '√âpouse' && $relation2 === 'Fille') || ($relation1 === 'Mari' && $relation2 === 'Fille')) {
            return 'Belle-m√®re / M√®re';
        }
        
        if (($relation1 === 'Fille' && $relation2 === '√âpouse') || ($relation1 === 'Fille' && $relation2 === 'Mari')) {
            return 'Belle-fille / Fille';
        }
        
        if ($relation1 === '√âpouse' && $relation2 === '√âpouse') {
            return 'Co-√©pouse (polygamie)';
        }
        
        if ($relation1 === 'Fille' && $relation2 === 'Fille') {
            return 'S≈ìur';
        }
        
        return 'Relation complexe √† d√©terminer';
    }
}
